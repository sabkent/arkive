@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using pws.Shared.Hubs
@using Microsoft.AspNetCore.Http.Connections
@inject NavigationManager NavigationManager
@implements IDisposable

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<button @onclick="ShowHubState" >hub state</button>
<ul id="diagnostics">
    @foreach (var diag in diagnostics)
    {
        <li>@diag</li>
    }
</ul>

@code {

    private HubConnection hubConnection;
	 
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private List<string> messages = new List<string>();
    private List<string> diagnostics = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithAutomaticReconnect(RetryForeverPolicy.Create())
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/myhub"), options =>
            {
                //https://stackoverflow.com/questions/60745737/failed-to-connect-to-signalr-in-blazor-webassembly
                options.SkipNegotiation = true;
                options.Transports = HttpTransportType.WebSockets;
                
            })
            .Build();

        hubConnection.Closed += exception =>
        {
            diagnostics.Add($"connection closed {exception}");
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += s =>
        {
            diagnostics.Add($"reconnected {s}");
            return Task.CompletedTask;
        };

        hubConnection.Reconnecting += exception =>
        {
            diagnostics.Add($"reconnecting {exception}");
            return Task.CompletedTask;
        };

        hubConnection.On<string>("SpreadAsync", (content) =>
        {
            messages.Add(content);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

    }

    public void ShowHubState()
    {
        diagnostics.Add($"State: {hubConnection?.State}");
    }

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }
}